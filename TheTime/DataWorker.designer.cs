#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TheTime
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DataSet")]
	public partial class DataWorkerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertOWMForecast(OWMForecast instance);
    partial void UpdateOWMForecast(OWMForecast instance);
    partial void DeleteOWMForecast(OWMForecast instance);
    partial void InsertAppSetting(AppSetting instance);
    partial void UpdateAppSetting(AppSetting instance);
    partial void DeleteAppSetting(AppSetting instance);
    #endregion
		
		public DataWorkerDataContext() : 
				base(global::TheTime.Properties.Settings.Default.DataSetConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataWorkerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataWorkerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataWorkerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataWorkerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<OWMForecast> OWMForecasts
		{
			get
			{
				return this.GetTable<OWMForecast>();
			}
		}
		
		public System.Data.Linq.Table<AppSetting> AppSettings
		{
			get
			{
				return this.GetTable<AppSetting>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OWMForecast")]
	public partial class OWMForecast : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _city;
		
		private string _region;
		
		private string _country;
		
		private string _period;
		
		private string _precipitation;
		
		private string _windDirection;
		
		private string _windSpeed;
		
		private string _temperature;
		
		private string _pressure;
		
		private string _humidity;
		
		private string _clouds;
		
		private string _symbol;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void OnregionChanging(string value);
    partial void OnregionChanged();
    partial void OncountryChanging(string value);
    partial void OncountryChanged();
    partial void OnperiodChanging(string value);
    partial void OnperiodChanged();
    partial void OnprecipitationChanging(string value);
    partial void OnprecipitationChanged();
    partial void OnwindDirectionChanging(string value);
    partial void OnwindDirectionChanged();
    partial void OnwindSpeedChanging(string value);
    partial void OnwindSpeedChanged();
    partial void OntemperatureChanging(string value);
    partial void OntemperatureChanged();
    partial void OnpressureChanging(string value);
    partial void OnpressureChanged();
    partial void OnhumidityChanging(string value);
    partial void OnhumidityChanged();
    partial void OncloudsChanging(string value);
    partial void OncloudsChanged();
    partial void OnsymbolChanging(string value);
    partial void OnsymbolChanged();
    #endregion
		
		public OWMForecast()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="NVarChar(10)")]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_region", DbType="NVarChar(10)")]
		public string region
		{
			get
			{
				return this._region;
			}
			set
			{
				if ((this._region != value))
				{
					this.OnregionChanging(value);
					this.SendPropertyChanging();
					this._region = value;
					this.SendPropertyChanged("region");
					this.OnregionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country", DbType="NVarChar(10)")]
		public string country
		{
			get
			{
				return this._country;
			}
			set
			{
				if ((this._country != value))
				{
					this.OncountryChanging(value);
					this.SendPropertyChanging();
					this._country = value;
					this.SendPropertyChanged("country");
					this.OncountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_period", DbType="NVarChar(10)")]
		public string period
		{
			get
			{
				return this._period;
			}
			set
			{
				if ((this._period != value))
				{
					this.OnperiodChanging(value);
					this.SendPropertyChanging();
					this._period = value;
					this.SendPropertyChanged("period");
					this.OnperiodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_precipitation", DbType="NVarChar(10)")]
		public string precipitation
		{
			get
			{
				return this._precipitation;
			}
			set
			{
				if ((this._precipitation != value))
				{
					this.OnprecipitationChanging(value);
					this.SendPropertyChanging();
					this._precipitation = value;
					this.SendPropertyChanged("precipitation");
					this.OnprecipitationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_windDirection", DbType="NVarChar(10)")]
		public string windDirection
		{
			get
			{
				return this._windDirection;
			}
			set
			{
				if ((this._windDirection != value))
				{
					this.OnwindDirectionChanging(value);
					this.SendPropertyChanging();
					this._windDirection = value;
					this.SendPropertyChanged("windDirection");
					this.OnwindDirectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_windSpeed", DbType="NVarChar(10)")]
		public string windSpeed
		{
			get
			{
				return this._windSpeed;
			}
			set
			{
				if ((this._windSpeed != value))
				{
					this.OnwindSpeedChanging(value);
					this.SendPropertyChanging();
					this._windSpeed = value;
					this.SendPropertyChanged("windSpeed");
					this.OnwindSpeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_temperature", DbType="NVarChar(10)")]
		public string temperature
		{
			get
			{
				return this._temperature;
			}
			set
			{
				if ((this._temperature != value))
				{
					this.OntemperatureChanging(value);
					this.SendPropertyChanging();
					this._temperature = value;
					this.SendPropertyChanged("temperature");
					this.OntemperatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pressure", DbType="NVarChar(10)")]
		public string pressure
		{
			get
			{
				return this._pressure;
			}
			set
			{
				if ((this._pressure != value))
				{
					this.OnpressureChanging(value);
					this.SendPropertyChanging();
					this._pressure = value;
					this.SendPropertyChanged("pressure");
					this.OnpressureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_humidity", DbType="NVarChar(10)")]
		public string humidity
		{
			get
			{
				return this._humidity;
			}
			set
			{
				if ((this._humidity != value))
				{
					this.OnhumidityChanging(value);
					this.SendPropertyChanging();
					this._humidity = value;
					this.SendPropertyChanged("humidity");
					this.OnhumidityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_clouds", DbType="NVarChar(10)")]
		public string clouds
		{
			get
			{
				return this._clouds;
			}
			set
			{
				if ((this._clouds != value))
				{
					this.OncloudsChanging(value);
					this.SendPropertyChanging();
					this._clouds = value;
					this.SendPropertyChanged("clouds");
					this.OncloudsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_symbol", DbType="NVarChar(10)")]
		public string symbol
		{
			get
			{
				return this._symbol;
			}
			set
			{
				if ((this._symbol != value))
				{
					this.OnsymbolChanging(value);
					this.SendPropertyChanging();
					this._symbol = value;
					this.SendPropertyChanged("symbol");
					this.OnsymbolChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppSettings")]
	public partial class AppSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _service;
		
		private string _curCity;
		
		private string _curRegion;
		
		private string _curCountry;
		
		private System.Nullable<int> _forecastDaysCount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnserviceChanging(string value);
    partial void OnserviceChanged();
    partial void OncurCityChanging(string value);
    partial void OncurCityChanged();
    partial void OncurRegionChanging(string value);
    partial void OncurRegionChanged();
    partial void OncurCountryChanging(string value);
    partial void OncurCountryChanged();
    partial void OnforecastDaysCountChanging(System.Nullable<int> value);
    partial void OnforecastDaysCountChanged();
    #endregion
		
		public AppSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service", DbType="NVarChar(5)")]
		public string service
		{
			get
			{
				return this._service;
			}
			set
			{
				if ((this._service != value))
				{
					this.OnserviceChanging(value);
					this.SendPropertyChanging();
					this._service = value;
					this.SendPropertyChanged("service");
					this.OnserviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_curCity", DbType="NVarChar(50)")]
		public string curCity
		{
			get
			{
				return this._curCity;
			}
			set
			{
				if ((this._curCity != value))
				{
					this.OncurCityChanging(value);
					this.SendPropertyChanging();
					this._curCity = value;
					this.SendPropertyChanged("curCity");
					this.OncurCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_curRegion", DbType="NVarChar(50)")]
		public string curRegion
		{
			get
			{
				return this._curRegion;
			}
			set
			{
				if ((this._curRegion != value))
				{
					this.OncurRegionChanging(value);
					this.SendPropertyChanging();
					this._curRegion = value;
					this.SendPropertyChanged("curRegion");
					this.OncurRegionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_curCountry", DbType="NVarChar(50)")]
		public string curCountry
		{
			get
			{
				return this._curCountry;
			}
			set
			{
				if ((this._curCountry != value))
				{
					this.OncurCountryChanging(value);
					this.SendPropertyChanging();
					this._curCountry = value;
					this.SendPropertyChanged("curCountry");
					this.OncurCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_forecastDaysCount", DbType="Int")]
		public System.Nullable<int> forecastDaysCount
		{
			get
			{
				return this._forecastDaysCount;
			}
			set
			{
				if ((this._forecastDaysCount != value))
				{
					this.OnforecastDaysCountChanging(value);
					this.SendPropertyChanging();
					this._forecastDaysCount = value;
					this.SendPropertyChanged("forecastDaysCount");
					this.OnforecastDaysCountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
